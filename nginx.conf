user  nginx;
worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
  worker_connections  1024;
}

http {
  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;

  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

  access_log  /var/log/nginx/access.log  main;

  sendfile        on;

  keepalive_timeout  65;

  # 上传文件限制大小
  client_max_body_size  1000m;
  client_body_buffer_size   1000m;
  client_header_buffer_size 1000m;

  # include /etc/nginx/conf.d/*.conf;

  server {
    listen       9000;
    charset utf-8;

    #开启和关闭gzip模式
    gzip on;

    #gizp压缩起点，文件大于1k才进行压缩
    gzip_min_length 1k;

    # gzip 压缩级别，1-9，数字越大压缩的越好，也越占用CPU时间
    gzip_comp_level 6;

    # 进行压缩的文件类型。
    gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/xml text/javascript application/json image/png image/gif image/jpeg;

    #nginx对于静态文件的处理模块，开启后会寻找以.gz结尾的文件，直接返回，不会占用cpu进行压缩，如果找不到则不进行压缩
    # gzip_static on|off

    # 是否在http header中添加Vary: Accept-Encoding，建议开启
    gzip_vary on;

    # 设置压缩所需要的缓冲区大小，以4k为单位，如果文件为7k则申请2*4k的缓冲区
    gzip_buffers 4 16k;

    # 设置gzip压缩针对的HTTP协议版本
    # gzip_http_version 1.1;

    # start ---------------------------------------------------------------------------------------------

    location / {
        root   /usr/share/nginx/html;
        try_files $uri $uri/ /index.html;

        # 文件上传头大小限制
        proxy_buffer_size 1280k;
        proxy_busy_buffers_size 1920k;
        proxy_buffers 4 1920k;
    }

    location /api {
      proxy_pass http://app:3001;
    }

    # end ---------------------------------------------------------------------------------------------
  }
}
